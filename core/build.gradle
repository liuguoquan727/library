apply plugin: 'com.android.library'
apply plugin: 'maven'

uploadArchives {
  repositories {
    mavenDeployer {

      pom.groupId = 'com.udiannet'
      pom.artifactId = 'core'
      pom.version = '1.0.0'

      repository(url: uri('/Users/liuguoquan/repository/Android-lib'))
    }
  }
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"

    consumerProguardFiles 'proguard.pro'

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    ndk {
      // 设置支持的SO库架构
      abiFilters 'armeabi-v7a'
    }
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  api fileTree(dir: 'libs', include: ['*.jar'])

  api "com.google.code.gson:gson:${GSON_VERSION}"

  api project(':BaseRecyclerAdapter')
  api project(':core-base')
  api project(':dialogplus')
  api project(':core-library')
  api project(":core-utils")


  api "com.squareup:otto:${OTTO_VERSION}"

  api "androidx.appcompat:appcompat:${SUPPORT_VERSION}"



  // okhttp系列
  api "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
  api "com.squareup.okhttp3:logging-interceptor:${OK_HTTP_VERSION}"

  // rxJava系列
  api "io.reactivex.rxjava2:rxandroid:${RXANDROID_VERSION}"
  api "io.reactivex.rxjava2:rxjava:${RXJAVA_VERSION}"
  api("com.jakewharton.rxbinding2:rxbinding:${RXBINDING_VERSION}") {
    exclude group: 'com.android.support', module: 'support-annotations'
    exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
  }
  api("com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:${RXBINDING_SUPPORT_VERSION}") {
    exclude group: 'com.android.support', module: 'recyclerview-v7'
  }
  api("com.jakewharton.rxbinding2:rxbinding-support-v4:${RXBINDING_SUPPORT_VERSION}") {
    exclude group: 'com.android.support', module: 'support-core-ui'
  }

  api 'com.trello.rxlifecycle3:rxlifecycle-android-lifecycle:3.0.0'

  // glide系列
  api "com.github.bumptech.glide:glide:${GLIDE_VERSION}"
  annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE_VERSION}"
  api "jp.wasabeef:glide-transformations:${GLIDE_TRANSFORMATIONS_VERSION}"

  api("com.afollestad.material-dialogs:core:${MATERIAL_DIALOGS}") {
    exclude group: 'me.zhanghai.android.materialprogressbar', module: 'library'
    exclude group: 'com.android.support', module: 'support-annotations'
    exclude group: 'com.android.support', module: 'support-v13'
    exclude group: 'com.android.support', module: 'recyclerview-v7'
    exclude group: 'com.android.support', module: 'appcompat-v7'
  }
  api("me.zhanghai.android.materialprogressbar:library:1.4.2") {
    exclude group: 'com.android.support', module: 'support-annotations'
    exclude group: 'com.android.support', module: 'appcompat-v7'
  }
}

task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}
task javadoc(type: Javadoc) {
  failOnError false
  source = android.sourceSets.main.java.sourceFiles
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  classpath += configurations.compile
}
// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}


